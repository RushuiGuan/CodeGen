using Albatross.CodeGen;
using Albatross.CodeGen.Database;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Albatross.CodeGen.SqlServer {
	[CodeGenerator("declare statement", "sql", Category ="Sql Server", Description = "Create a declare statement based on the parameters generated by the children")]
	public class DeclareStatement : ICodeGenerator<DatabaseObject, SqlQueryOption>{

		IColumnSqlTypeBuilder typeBuilder;
		IGetVariable getVariable;

		public DeclareStatement(IColumnSqlTypeBuilder typeBuilder, IGetVariable getVariable) {
			this.typeBuilder = typeBuilder;
			this.getVariable = getVariable;
		}

		public string Name => "declare statement";
		public string Category => "Sql server";
		public string Description => "Create a declare statement based on the parameters generated by the children";
		public string Target => "sql";

		public Type SourceType => typeof(DatabaseObject);
		public Type OptionType => typeof(SqlQueryOption);

		public event Func<StringBuilder, IEnumerable<object>> Yield;

		public IEnumerable<object>  Build(StringBuilder sb, DatabaseObject src, SqlQueryOption options) {
			List<object> list = new List<object> { this };

			StringBuilder child = new StringBuilder();
			var items = Yield?.Invoke(child);

			Dictionary<string, string> variables = new Dictionary<string, string>();
			foreach (var item in items) {
				foreach (var pair in getVariable.Get(item)) {
					variables.Add(pair.Key, pair.Value);
				}
			}
			if (variables.Count > 0) {
				sb.AppendLine("declare");
				foreach (var variable in variables) {
					sb.Tab().Append(variable.Key).Append(" as ").Append(variable.Value);
					if (variable.Key == variables.Last().Key) {
						sb.Semicolon().AppendLine();
					} else {
						sb.Comma().AppendLine();
					}
				}
			}

			sb.Append(child);
			list.AddRange(items);
			return list;
		}

		public void Configure(object data) { }
	}
}
