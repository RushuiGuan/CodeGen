using Albatross.CodeGen;
using Albatross.CodeGen.Database;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Albatross.CodeGen.SqlServer {
	[CodeGenerator("declare statement", "sql", Category ="Sql Server", Description = "Create a declare statement based on the parameters generated by the children")]
	public class DeclareStatement : ICodeGenerator<DatabaseObject, SqlCodeGenOption>{

		IColumnSqlTypeBuilder typeBuilder;
		IGetVariable getVariable;
		IBuildVariable buildVariable;

		public DeclareStatement(IColumnSqlTypeBuilder typeBuilder, IGetVariable getVariable, IBuildVariable buildVariable) {
			this.typeBuilder = typeBuilder;
			this.getVariable = getVariable;
			this.buildVariable = buildVariable;
		}

		public string Name => "declare statement";
		public string Category => "Sql server";
		public string Description => "Create a declare statement based on the parameters generated by the children";
		public string Target => "sql";

		public Type SourceType => typeof(DatabaseObject);
		public Type OptionType => typeof(SqlCodeGenOption);

		public event Func<StringBuilder, IEnumerable<object>> Yield;

		public IEnumerable<object>  Build(StringBuilder sb, DatabaseObject src, SqlCodeGenOption options) {
			List<object> list = new List<object> { this };

			StringBuilder child = new StringBuilder();
			var items = Yield?.Invoke(child);

			IEnumerable<Variable> variables = new Variable[0];
			foreach (var item in items) {
				variables.Union(getVariable.Get(item));
			}
			if (variables.Count() > 0) {
				sb.AppendLine("declare");
				foreach (var variable in variables) {
					buildVariable.Build(sb.Tab(), variable);
					if (variable == variables.Last()) {
						sb.Semicolon().AppendLine();
					} else {
						sb.Comma().AppendLine();
					}
				}
			}

			sb.Append(child);
			list.AddRange(items);
			return list;
		}

		public void Configure(object data) { }
	}
}
